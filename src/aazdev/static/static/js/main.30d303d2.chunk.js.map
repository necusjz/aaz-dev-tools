{"version":3,"sources":["components/ModuleAccordion.tsx","components/Editor.tsx","App.tsx","index.tsx"],"names":["CustomAccordion","props","getVersion","versionList","map","version","index","getResourceId","resourceIdList","Accordion","resourceId","id","Object","keys","Item","eventKey","toString","Header","Body","getModule","spec","activeKey","state","activeModule","undefined","onSelect","e","setState","moduleName","mgmtPlaneSpecs","dataPlaneSpecs","hidden","this","PureComponent","Editor","componentDidMount","resource","getCommandDetail","argumentList","arg","getModuleDetail","commands","command","specLinks","className","placeholder","Component","App","listAllSpecs","axios","get","then","res","allMgmtPlaneSpecs","data","allDataPlaneSpecs","catch","err","console","log","handleSearch","found","moduleFound","handleInput","target","value","Specs","onChange","onClick","Navbar","bg","variant","Container","Nav","Link","href","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30d303d2.chunk.js","sourcesContent":["import React, { PureComponent} from \"react\";\r\nimport {Accordion} from \"react-bootstrap\";\r\nimport { ListGroup, ListGroupItem} from \"reactstrap\";\r\n\r\ntype VersionList = []\r\n\r\ntype ResourceId = string\r\n\r\ntype Module = [{\r\n  [key: ResourceId]: VersionList\r\n}]\r\n\r\ntype ModuleName = string\r\n\r\ntype Spec = {\r\n  [key: ModuleName]: Module\r\n}\r\n\r\ntype AccordionProp = {\r\n  mgmtPlaneSpecs: Spec | null,\r\n  dataPlaneSpecs: Spec | null,\r\n  hidden: boolean\r\n}\r\n\r\ntype AccordionState = {\r\n  mgmtPlaneSpecs: Spec | null,\r\n  dataPlaneSpecs: Spec | null,\r\n  hidden: boolean,\r\n  activeModule: string | null\r\n}\r\n\r\n\r\nexport default class CustomAccordion extends PureComponent<AccordionProp, AccordionState> {\r\n    constructor(props: AccordionProp) {\r\n        super(props);\r\n        this.state = {\r\n            mgmtPlaneSpecs: this.props.mgmtPlaneSpecs,\r\n            dataPlaneSpecs: this.props.dataPlaneSpecs,\r\n            hidden: this.props.hidden,\r\n            activeModule: null\r\n        };\r\n      }\r\n\r\n    getVersion = (versionList: VersionList) => {\r\n      return versionList.map((version, index)=>{\r\n        return <ListGroupItem key={index}>{version}</ListGroupItem>\r\n      })\r\n    }\r\n\r\n    getResourceId = (resourceIdList: Module) => {\r\n      return  <Accordion>\r\n                {resourceIdList.map((resourceId: {[key: ResourceId]: VersionList}, index: number) =>{\r\n                  let id = Object.keys(resourceId)[0]\r\n                  return  <Accordion.Item eventKey={index.toString()} key={index.toString()}>\r\n                            <Accordion.Header>{id}</Accordion.Header>\r\n                            <Accordion.Body>\r\n                            <ListGroup>\r\n                              {this.getVersion(resourceId[id])}\r\n                            </ListGroup>\r\n                            </Accordion.Body>\r\n                          </Accordion.Item>\r\n                })}\r\n              </Accordion>\r\n    }\r\n\r\n    getModule = (spec: Spec) =>{\r\n      return  <Accordion activeKey={this.state.activeModule?this.state.activeModule:undefined} onSelect={e => this.setState({activeModule: e})}>\r\n                {Object.keys(spec).map((moduleName, index) =>{\r\n                  return <Accordion.Item eventKey={index.toString()} key={index.toString()}>\r\n                          <Accordion.Header>{moduleName}</Accordion.Header>\r\n                          <Accordion.Body>\r\n                            {this.state.activeModule==index.toString() && this.getResourceId(spec[moduleName])}\r\n                          </Accordion.Body>\r\n                          </Accordion.Item>\r\n                })}\r\n              </Accordion>\r\n    }\r\n\r\n    render() {\r\n        return <Accordion hidden={this.props.hidden}>\r\n                {this.props.mgmtPlaneSpecs && \r\n                <Accordion.Item key='0' eventKey=\"0\">\r\n                  <Accordion.Header>Management Plane</Accordion.Header>\r\n                  <Accordion.Body>\r\n                    {this.getModule(this.props.mgmtPlaneSpecs)}\r\n                  </Accordion.Body>\r\n                </Accordion.Item>\r\n                }\r\n                {this.props.dataPlaneSpecs &&\r\n                <Accordion.Item key='1' eventKey=\"1\">\r\n                  <Accordion.Header>Data Plane</Accordion.Header>\r\n                  <Accordion.Body>\r\n                    {this.getModule(this.props.dataPlaneSpecs)}\r\n                  </Accordion.Body>\r\n                </Accordion.Item>\r\n                }\r\n              </Accordion>\r\n    }\r\n} \r\n\r\nexport type {Spec}","import React, { Component } from \"react\";\r\nimport { Input, InputGroup, Button, ListGroup, ListGroupItem} from \"reactstrap\";\r\nimport { Accordion } from \"react-bootstrap\";\r\n\r\n\r\ntype Name = string\r\ntype Type = string\r\n\r\ntype Argument = {\r\n  name: Name,\r\n  type: Type\r\n}\r\n\r\ntype Command = {\r\n  name: Name,\r\n  arguments: Argument[]\r\n}\r\n\r\ntype Resource = {\r\n  name: Name,\r\n  commands: Command[]\r\n} | null\r\n\r\ntype EditorState = {\r\n  resource: Resource\r\n}\r\n\r\nexport default class Editor extends Component<{}, EditorState> {\r\n\r\n    constructor(props: any) {\r\n      super(props);\r\n      this.state = {\r\n        resource: null\r\n      }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      this.setState({\r\n        resource:{\r\n          \"name\": \"user\",\r\n          \"commands\": [{\r\n            \"name\":\"create\",\r\n            \"arguments\":[{\r\n              \"name\":\"username\",\r\n              \"type\":\"string\"\r\n            }, {\r\n              \"name\":\"password\",\r\n              \"type\":\"string\"\r\n            }, {\r\n              \"name\":\"phone\",\r\n              \"type\":\"number\"\r\n            }]\r\n          }, {\r\n            \"name\":\"update\",\r\n            \"arguments\":[{\r\n              \"name\":\"id\",\r\n              \"type\":\"string\"\r\n            }, {\r\n              \"name\":\"username\",\r\n              \"type\":\"string\"\r\n            }, {\r\n              \"name\":\"password\",\r\n              \"type\":\"string\"\r\n            }, {\r\n              \"name\":\"phone\",\r\n              \"type\":\"number\"\r\n            }]\r\n          }, {\r\n            \"name\":\"show\",\r\n            \"arguments\":[{\r\n              \"name\":\"id\",\r\n              \"type\":\"string\"\r\n            }]\r\n          }]\r\n        }\r\n      })\r\n    }\r\n\r\n    getCommandDetail = (argumentList: Argument[]) => {\r\n      return argumentList.map(arg=>{\r\n        return <ListGroupItem key={arg[\"name\"]}>{arg[\"name\"]}</ListGroupItem>\r\n        })\r\n    }\r\n\r\n    getModuleDetail = (commands: Command[]) => {\r\n      return commands && commands.map((command) =>{\r\n        return <Accordion key={command[\"name\"]}>\r\n            <Accordion.Item eventKey={command[\"name\"]}>\r\n                <Accordion.Header>{command[\"name\"]}</Accordion.Header>\r\n                <Accordion.Body>\r\n                  <ListGroup>{this.getCommandDetail(command[\"arguments\"])}</ListGroup>\r\n                </Accordion.Body>\r\n            </Accordion.Item>\r\n            </Accordion>\r\n        }\r\n      )\r\n          \r\n    }\r\n\r\n    specLinks = () => {\r\n      return <div>\r\n                <p>Module Name: {this.state.resource && this.state.resource[\"name\"]}</p>\r\n                {this.state.resource && this.getModuleDetail(this.state.resource[\"commands\"])}\r\n            </div>  \r\n      \r\n    }\r\n\r\n\r\n    render() {\r\n      return  <div>\r\n                <div className=\"container-fluid row\">\r\n                  <div className=\"col-md-6\">\r\n                    <InputGroup>\r\n                      <Input placeholder=\"Draft Name\" />\r\n                    </InputGroup>\r\n                  </div>\r\n                  <div className=\"col-md-3\">\r\n                    <InputGroup>\r\n                      <Input placeholder=\"Resource Id\" />\r\n                    </InputGroup>\r\n                  </div>\r\n                  <div className=\"col-md-3\">\r\n                    <Button>Save</Button> <Button>Commit</Button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"container-fluid row\">\r\n                  <div className=\"col-md-2\">\r\n                    <this.specLinks/>\r\n                  </div>\r\n                  <div className=\"col-md-10\">\r\n                    <p>Editor View</p>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n    }\r\n} ","import React, { Component } from \"react\";\r\nimport { Routes, Route} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { InputGroup, Input, Button, } from \"reactstrap\";\r\nimport {Navbar, Nav, Container} from \"react-bootstrap\"\r\nimport ModuleAccordion from \"./components/ModuleAccordion\"\r\nimport Editor from \"./components/Editor\";\r\nimport {Spec} from \"./components/ModuleAccordion\"\r\n\r\n\r\ntype AppState = {\r\n  mgmtPlaneSpecs: Spec | null,\r\n  dataPlaneSpecs: Spec | null,\r\n  allMgmtPlaneSpecs: Spec,\r\n  allDataPlaneSpecs: Spec,\r\n  moduleName: string,\r\n  moduleFound: boolean,\r\n}\r\n\r\nclass App extends Component<{}, AppState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      mgmtPlaneSpecs: null,\r\n      dataPlaneSpecs: null,\r\n      allMgmtPlaneSpecs: {},\r\n      allDataPlaneSpecs: {},\r\n      moduleName: \"\",\r\n      moduleFound: false\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n   this.listAllSpecs();\r\n  }\r\n\r\n  listAllSpecs = () => {\r\n    axios\r\n      .get(\"/specifications\")\r\n      .then((res) => {\r\n        this.setState({ allMgmtPlaneSpecs: res.data[\"mgmt\"], \r\n                        allDataPlaneSpecs: res.data[\"data\"],\r\n                        mgmtPlaneSpecs: res.data[\"mgmt\"],\r\n                        dataPlaneSpecs: res.data[\"data\"],\r\n                      })\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  handleSearch = () => {\r\n    let found = false\r\n    if (this.state.moduleName in this.state.allMgmtPlaneSpecs){\r\n      let mgmtPlaneSpecs:Spec = {};\r\n      mgmtPlaneSpecs[this.state.moduleName] = this.state.allMgmtPlaneSpecs[this.state.moduleName]\r\n      this.setState({ mgmtPlaneSpecs: mgmtPlaneSpecs})\r\n      found = true\r\n    } else {\r\n      this.setState({ mgmtPlaneSpecs: null})\r\n    }\r\n    if (this.state.moduleName in this.state.allDataPlaneSpecs){\r\n      let dataPlaneSpecs:Spec = {};\r\n      dataPlaneSpecs[this.state.moduleName] = this.state.allDataPlaneSpecs[this.state.moduleName]\r\n      this.setState({ dataPlaneSpecs: dataPlaneSpecs})\r\n      found = true\r\n    } else {\r\n      this.setState({ dataPlaneSpecs: null})\r\n    }\r\n    if (!found){\r\n      this.setState({ mgmtPlaneSpecs: null, dataPlaneSpecs: null, moduleFound: false})\r\n    } else {\r\n      this.setState({moduleFound: true})\r\n    }\r\n  }\r\n\r\n  handleInput = (e: any) => {\r\n    this.setState({moduleName: e.target.value})\r\n  }\r\n\r\n  Specs = () => {\r\n    return  <div className=\"container-fluid row\">\r\n              <InputGroup>\r\n                <Input placeholder=\"Module Name\" value={this.state.moduleName} onChange={this.handleInput}/>\r\n                <Button onClick={this.handleSearch}>Search</Button> \r\n              </InputGroup>\r\n              <br/>\r\n              <ModuleAccordion hidden={!this.state.moduleFound} mgmtPlaneSpecs={this.state.mgmtPlaneSpecs} dataPlaneSpecs={this.state.dataPlaneSpecs}></ModuleAccordion>\r\n              <ModuleAccordion hidden={this.state.moduleFound} mgmtPlaneSpecs={this.state.allMgmtPlaneSpecs} dataPlaneSpecs={this.state.allDataPlaneSpecs}></ModuleAccordion>\r\n            </div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"container\">\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Container>\r\n          <Nav className=\"me-auto\">\r\n            <Nav.Link href=\"/\">Specifications</Nav.Link>\r\n            <Nav.Link href=\"/editor\">Editor</Nav.Link>\r\n          </Nav>\r\n          </Container>\r\n        </Navbar>\r\n        <Routes>\r\n          <Route path=\"/\" element={<this.Specs />} /> \r\n          <Route path=\"editor\" element={<Editor />} />\r\n        </Routes>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}